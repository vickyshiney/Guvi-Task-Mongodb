# -*- coding: utf-8 -*-
"""mongodb student  task

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HbxgL2V1CnzislWcf3MOWBfUFmhExmFf

**Student Database (MongoDB)**
"""

!pip install dnspython

!pip install pymongo[srv]

import pymongo
client = pymongo.MongoClient("mongodb+srv://vicky0329:vicky0329@cluster0.wxmjxoe.mongodb.net/?retryWrites=true&w=majority")
db = client.d30
records=db.students
db

records.count_documents({})

db = client.d30
exam=db.exam_collection

exam.drop()

for j in range(200):
  x=records.aggregate([{"$match":{"_id":j}},{"$unwind":"$scores"},{"$match":{"scores.type":"exam"}},{"$sort":{"scores.score":-1}}])
  for i in x:
    i=exam.insert_many([i])

s=exam.find().sort('scores.score',-1).limit(1) 
for i in s:
  print(i)

db = client.d30
quiz=db.quiz_collection

quiz.drop()

for j in range(200):
  x=records.aggregate([{"$match":{"_id":j}},{"$unwind":"$scores"},{"$match":{"scores.type":"quiz"}},{"$sort":{"scores.score":-1}}])
  for i in x:
    i=quiz.insert_many([i])

s=quiz.find().sort('scores.score',-1).limit(1)
for i in s:
  print(i)

db = client.d30
homework=db.homework_collection

homework.drop()

for j in range(200):
  x=records.aggregate([{"$match":{"_id":j}},{"$unwind":"$scores"},{"$match":{"scores.type":"homework"}},{"$sort":{"scores.score":-1}}])
  for i in x:
    i=homework.insert_many([i])
   
s=homework.find().sort('scores.score',-1).limit(1)
for i in s:
  print(i)

"""1)      **Find the student name who scored maximum scores in all (exam, quiz and homework)?**

soln: Per above analysis found that

max score in exam is 'Margart Vitello'
{'_id': 136, 'name': 'Margart Vitello', 'scores': {'score': 99.33685767140612, 'type': 'exam'}}**bold text**

max score in quiz s 'Cody Strouth'
{'_id': 69, 'name': 'Cody Strouth', 'scores': {'score': 99.80348240553108, 'type': 'quiz'}}

max score in homework is 'Whitley Fears'
{'_id': 178, 'name': 'Whitley Fears', 'scores': {'score': 99.77237745070993, 'type': 'homework'}}

**2)Find students who scored below average in the exam and pass mark is 40%?**

avg score:
"""

x= exam.aggregate([{'$group' : {'_id' : "null", "avg_exam" : {'$avg' : "$scores.score"}}}])
for i in x:
  print(i)

db = client.d30
lessavg=db.lessavg_collection

"""# To find less than/ below average score in Exam"""

lessavg.drop()

x=db.exam_collection.find({'scores.score':{'$lt':48.67367075950175} })
for i in x:
  i=lessavg.insert_many([i])
  #print(i)

lessavg.count_documents({})

"""**3) Find students who scored below pass mark and assigned them as fail, and above pass mark as pass in all the categories.**

Students failed in **exam**
"""

db = client.d30
failexam=db.fail_exam

failexam.drop()

x=db.exam_collection.find(
    {'scores.score':{'$lt':40}
     }
)
for i in x:
  i=failexam.insert_many([i])
  #print(i)
  
failexam.count_documents({})

"""Students who Pass in **EXAM**"""

db = client.d30
passexam=db.pass_exam

passexam.drop()

x=db.exam_collection.find(
    {'scores.score':{'$gte':40}
     }
)
for i in x:
  i=passexam.insert_many([i])
  #print(i)

passexam.count_documents({})

"""Students who Fail in **Quiz**"""

db = client.d30
failquiz=db.fail_quiz

failquiz.drop()

x=db.quiz_collection.find(
    {'scores.score':{'$lt':40}
     }
)
for i in x:
  i=failquiz.insert_many([i])

failquiz.count_documents({})

"""Students who Pass in Quiz"""

db = client.d30
passquiz=db.pass_quiz

passquiz.drop()

x=db.quiz_collection.find(
    {'scores.score':{'$gte':40}
     }
)
for i in x:
  i=passquiz.insert_many([i])

passquiz.count_documents({})

"""Students who fail in **Homework**"""

db = client.d30
failhomework=db.fail_homework

failhomework.drop()

x=db.homework_collection.find(
    {'scores.score':{'$lt':40}
     }
)
for i in x:
  i=failhomework.insert_many([i])
  
  
failhomework.count_documents({})

"""Students who Pass Home **work**"""

db = client.d30
passhomework=db.pass_homework

passhomework.drop()

x=db.homework_collection.find(
    {'scores.score':{'$gte':40}
     }
)
for i in x:
  i=passhomework.insert_many([i])
  
passhomework.count_documents({})

"""Per above analysis db.fail_exam, db.fail_quiz, db.fail_homework....shows who scored below passmark and assingned the collection as fail in all the categories db.pass_exam, db.pass_quiz, db.pass_homework....shows who scored above passmark and assingned the collection as pass in all the categories

4) Find the total and average of the exam, quiz and homework and store them in a separate collection.**bold text**

Total and Average of **Exam**
"""

db = client.d30
exam1=db.exam

exam1.drop()

x= db.exam_collection.aggregate([{"$match": {"scores.type":"exam"}},{ "$unwind":"$scores"},{"$match": { "scores.type":"exam" } },{"$group": {
       "_id": 'total_score_exam',
       "total_score": { "$sum": "$scores.score" } }}])
for i in x:
  i=exam1.insert_many([i])
  print(i)

x=db.exam_collection.aggregate([{'$group' : {'_id' : "avg_score_exam", "avg_score" : {'$avg' : "$scores.score"}}}])
for i in x:
  i=exam1.insert_many([i])
  print(i)
  
exam1.count_documents({})
for x in exam1.find():
  print(x)

"""Total and Average of **Quiz**"""

db = client.d30
quiz1=db.quiz

quiz1.drop()

x= db.quiz_collection.aggregate([{"$match": {"scores.type":"quiz"}},{ "$unwind":"$scores"},{"$match": { "scores.type":"quiz" } },{"$group": {
       "_id": 'total_score_quiz',
       "total_score": { "$sum": "$scores.score" } }}])
for i in x:
  i=quiz1.insert_many([i])
  print(i)
  
x=db.quiz_collection.aggregate([{'$group' : {'_id' : "avg_score_quiz", "avg_score" : {'$avg' : "$scores.score"}}}])
for i in x:
  i=quiz1.insert_many([i])
  print(i)

quiz1.count_documents({})
for x in quiz1.find():
  print(x)

"""Total and Average for **Homework**"""

db = client.d30
homework1=db.homework

homework1.drop()

x= db.homework_collection.aggregate([{"$match": {"scores.type":"homework"}},{ "$unwind":"$scores"},{"$match": { "scores.type":"homework" } },{"$group": {
       "_id": 'total_score_homework',
       "total_score": { "$sum": "$scores.score" } }}])
for i in x:
  i=homework1.insert_many([i])
  print(i)

x=db.homework_collection.aggregate([{'$group' : {'_id' : "avg_score_homework", "avg_score" : {'$avg' : "$scores.score"}}}])
for i in x:
  i=homework1.insert_many([i])
  print(i)
  
homework1.count_documents({})
for x in homework1.find():
  print(x)

"""5) Create a new collection which consists of students who scored below average and above 40% in all the categories.**bold text**"""

db = client.d30
gtltexam=db.gt40_ltavg_exam

gtltexam.drop()
x=db.exam_collection.find({'scores.score':{'$gte':40,'$lt':48.67367075950175}})
for i in x:
  i=gtltexam.insert_many([i])
  
gtltexam.count_documents({})
for x in gtltexam.find():
  print(x)

"""New Collection for **Quiz**"""

db = client.d30
gtltquiz=db.gt40_ltavg_quiz

gtltquiz.drop()

x=db.quiz_collection.find({'scores.score':{'$gte':40,'$lt':48.67367075950175}})
for i in x:
  i=gtltquiz.insert_many([i])
  
gtltquiz.count_documents({})
for x in gtltquiz.find():
  print(x)

gtltquiz.count_documents({})

"""New Collection for Homework"""

db = client.d30
gtlthomework=db.gt40_ltavg_homework
gtlthomework.drop()

x=db.homework_collection.find({'scores.score':{'$gte':40,'$lt':48.67367075950175}})
for i in x:
  i=gtlthomework.insert_many([i])

for x in gtlthomework.find():
  print(x)
  
gtlthomework.count_documents({})

"""Following collections has been created 
db.gt40_ltavg_exam....this shows the collection which consists of students who scored below average and above 40% in exam. db.gt40_ltavg_quiz....this shows the collection which consists of students who scored below average and above 40% in quiz. db.gt40_ltavg_homework....this shows the collection which consists of students who scored below average and above 40% in homework

6) Create a new collection which consists of students who scored below the fail mark in all the categories.**bold text**

New collection for **Exam**
"""

db = client.d30
ltfailexam=db.lt_fail_exam

ltfailexam.drop()

x=db.exam_collection.find({'scores.score':{'$lt':1}})
for i in x:
  i=ltfailexam.insert_many([i])


for x in ltfailexam.find():
  print(x)
  
  
ltfailexam.count_documents({})

"""New collection for Quiz"""

db = client.d30
ltfailquiz=db.lt_fail_quiz
ltfailquiz.drop()

x=db.quiz_collection.find({'scores.score':{'$lt':1}})
for i in x:
  i=ltfailquiz.insert_many([i])
for x in ltfailquiz.find():
  print(x)
  
ltfailquiz.count_documents({})

"""New collection for **Homework**"""

db = client.d30
ltfailhomework=db.lt_fail_homework

ltfailhomework.drop()

x=db.homework_collection.find({'scores.score':{'$lt':1}})
for i in x:
  i=ltfailhomework.insert_many([i])
for x in ltfailhomework.find():
  print(x)

ltfailhomework.count_documents({})

"""Created following collections above
db.lt_fail_exam...this new collection which consists of students who scored below the fail mark in exam db.lt_fail_quiz...this new collection which consists of students who scored below the fail mark in quiz db.lt_fail_homework...this new collection which consists of students who scored below the fail mark in homework

**7) Create a new collection which consists of students who scored above pass mark in all the categories.**

**New collection for Exam**
"""

db = client.d30
gtpassexam=db.gt_pass_exam

gtpassexam.drop()

x=db.exam_collection.find({'scores.score':{'$gte':40}})
for i in x:
  i=gtpassexam.insert_many([i])
for x in gtpassexam.find():
  print(x)
  
gtpassexam.count_documents({})

"""**New collection for QUIZ**"""

db = client.d30
gtpassquiz=db.gt_pass_quiz

gtpassquiz.drop()
x=db.quiz_collection.find({'scores.score':{'$gte':40}})
for i in x:
  i=gtpassquiz.insert_many([i])
for x in gtpassquiz.find():
  print(x)
  
gtpassquiz.count_documents({})

"""**new collection for Homework:**"""

db = client.d30
gtpasshomework=db.gt_pass_homework

gtpasshomework.drop()
x=db.homework_collection.find({'scores.score':{'$gte':40}})
for i in x:
  i=gtpasshomework.insert_many([i])
for x in gtpasshomework.find():
  print(x)
  
gtpasshomework.count_documents({})

"""collection has been created 
db.gt_pass_exam.......this new collection which consists of students who scored above pass mark in exam db.gt_pass_quiz.......this new collection which consists of students who scored above pass mark in quiz db.gt_pass_homework...this new collection which consists of students who scored above pass mark in homework


"""

